# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master
pr:
  autoCancel: true
  branches:
    include:
      - master

variables:
- name: baseVersionNumber
  value: '0.0'
- name: Minor 
  value: $[counter(variables['BaseVersionNumber'], 1)]
- name: VersionNumber 
  value: $(BaseVersionNumber).$(Minor)

pool:
  vmImage: 'windows-latest'

name: pokemonascii_$(BuildID)

steps:
  - task: PowerShell@2
    displayName: "Update Build Number"
    inputs:
      targetType: 'inline'
      script: |
          $BuildName = $env:BUILD_DEFINITIONNAME +'_'+$env:VERSIONNUMBER +'_'+ $env:BUILD_SOURCEBRANCHNAME 
          Write-Host "##vso[build.updatebuildnumber]$BuildName"

  # - task: AzurePowerShell@5
  #   displayName: 'Azure PowerShell script: InlineScript'
  #   inputs:
  #     azureSubscription: 'pokemonascii'
  #     ScriptType: InlineScript
  #     Inline: |        
  #       Install-Module Pester -MinimumVersion 4.4.2 -MaximumVersion 4.10.1 -Scope CurrentUser -SkipPublisherCheck -Force
  #       Import-Module Pester -MinimumVersion 4.4.2 -MaximumVersion 4.10.1 
  #       Set-Location "./Tests"
  #       $Edition = $PSVersionTable.PSEdition
  #       Invoke-Pester -CodeCoverage ../P*/*.ps1 -Script @{Path = "./*.tests.ps1"} -OutputFile "Test-$Edition-Results.xml" -OutputFormat NUnitXML -CodeCoverageOutputFile "coverage-$Edition-results.xml"
  #     azurePowerShellVersion: LatestVersion
  # - task: PublishTestResults@2
  #   displayName: "Publish Test Results **/Test*Results.xml"
  #   inputs:
  #     testResultsFormat: NUnit
  #     testResultsFiles: "**/Test-*Results.xml"
  #     testRunTitle: windows-latest
  #     publishRunAttachments: false
  #     failTaskOnFailedTests: true

  # - task: PublishCodeCoverageResults@1
  #   displayName: 'Publish Tests Coverage'
  #   inputs:
  #     codeCoverageTool: 'JaCoCo'
  #     summaryFileLocation: '**/coverage-*-results.xml'
  #     pathToSources: '$(System.DefaultWorkingDirectory)'
  #     failIfCoverageEmpty: true

  - task: CopyFiles@2
    displayName: "Copy Files to: $(build.artifactstagingdirectory)"
    inputs:
      Contents: |
        Public\**
        pkmnasciifiles\**
        *.psd1
        *.psm1
      TargetFolder: "$(build.artifactstagingdirectory)"

  - task: PublishBuildArtifacts@1
    displayName: "Publish Artifact: pokemonascii"
    inputs:
      ArtifactName: pokemonascii

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: pokemonascii
      path: $(Build.ArtifactStagingDirectory)\pokemonascii

  - task: PowerShell@2
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: "Publish to PowerShellGallery"
    inputs:
      targetType: "inline"
      script: |
        Install-Module Spiny -Scope CurrentUser -SkipPublisherCheck -Force -Verbose
        Import-Module Spiny -Force -Verbose
        $moduleNumber = Edit-SPModuleVersionNumber -ModuleVersionNumber $env:VERSIONNUMBER -psd1File $(Build.ArtifactStagingDirectory)/pokemonascii/pokemonascii.psd1
        Publish-SPPackageToPowerShellGallery `
        -apiKey '$(apikey)' `
        -path $(Build.ArtifactStagingDirectory)/pokemonascii
      pwsh: true